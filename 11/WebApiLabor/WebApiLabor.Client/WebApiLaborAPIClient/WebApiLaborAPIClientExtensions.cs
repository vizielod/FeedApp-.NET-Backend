// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebApiLaborAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for WebApiLaborAPIClient.
    /// </summary>
    public static partial class WebApiLaborAPIClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiProductGet(this IWebApiLaborAPIClient operations)
            {
                Task.Factory.StartNew(s => ((IWebApiLaborAPIClient)s).ApiProductGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProductGetAsync(this IWebApiLaborAPIClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiProductGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            public static void ApiProductPost(this IWebApiLaborAPIClient operations, Product product = default(Product))
            {
                Task.Factory.StartNew(s => ((IWebApiLaborAPIClient)s).ApiProductPostAsync(product), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProductPostAsync(this IWebApiLaborAPIClient operations, Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiProductPostWithHttpMessagesAsync(product, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific product with the given identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier.
            /// </param>
            public static Product ApiProductByIdGet(this IWebApiLaborAPIClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IWebApiLaborAPIClient)s).ApiProductByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific product with the given identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> ApiProductByIdGetAsync(this IWebApiLaborAPIClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProductByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            public static void ApiProductByIdPut(this IWebApiLaborAPIClient operations, int id, Product product = default(Product))
            {
                Task.Factory.StartNew(s => ((IWebApiLaborAPIClient)s).ApiProductByIdPutAsync(id, product), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProductByIdPutAsync(this IWebApiLaborAPIClient operations, int id, Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiProductByIdPutWithHttpMessagesAsync(id, product, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiProductByIdDelete(this IWebApiLaborAPIClient operations, int id)
            {
                Task.Factory.StartNew(s => ((IWebApiLaborAPIClient)s).ApiProductByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProductByIdDeleteAsync(this IWebApiLaborAPIClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiProductByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
